// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // ----- x pre-config -----

    // Select from X and 0000 0000 0000 0000 using "zx" flag
    Mux16 (a=x, b[0..15]=false, sel=zx, out=tempX);

    Not16 (in=tempX, out=negatedX);

    // Select from X and negated X using "nx" flag
    Mux16 (a=tempX, b=negatedX, sel=nx, out=presetX);

    // ----- x pre-config -----



    // ----- y pre-config -----

    // Select from Y and 0000 0000 0000 0000 using "zy" flag
    Mux16 (a=y, b[0..15]=false, sel=zy, out=tempY);

    Not16 (in=tempY, out=negatedY);

    // Select from Y and negated Y using "ny" flag
    Mux16 (a=tempY, b=negatedY, sel=ny, out=presetY);

    // ----- y pre-config -----



    // ----- calculate out -----

    And16 (a=presetX, b=presetY, out=bitwiseAnd);
    Add16 (a=presetX, b=presetY, out=addition);

    // Select from (x + y) and (x & y)
    Mux16 (a=bitwiseAnd, b=addition, sel=f, out=tempOut);

    Not16 (in=tempOut, out=negatedTempOut);

    // - Select from "tempOut" and "negatedTempOut" using "no" flag to find "out"
    // - "ng" should be 1 if "out" < 0. If the last bit is 1 ("out" is negative), "ng" should
    //   be 1. So we just pipe the last bit to "ng"
    // - We also pipe the first and last 8 bits of "out" to use in "zr" calculation.
    Mux16 (a=tempOut, b=negatedTempOut, sel=no, out=out, out[15]=ng, out[0..7]=outFirst8Bits, out[8..15]=outLast8Bits);

    // ----- calculate out -----



    // ----- calculate zr -----

    // Are there any 1s in the first 8 bits
    Or8Way (in=outFirst8Bits, out=zrCheck1);

    // Are there any 1s in the last 8 bits
    Or8Way (in=outLast8Bits, out=zrCheck2);

    // Output of OR will be 1 if the first or the last 8 bits have any 1s
    Or (a=zrCheck1, b=zrCheck2, out=checkFor1);

    // We need the inverse of OR for zr. zr is 1 if the output of OR is 0
    Not (in=checkFor1, out=zr);

    // ----- calculate zr -----
}
