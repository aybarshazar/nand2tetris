// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16], load, inc, reset;
    OUT out[16];

    PARTS:

    // The priority of the operations according to the specification above is
    // as follows: reset > load > increment
    // So we apply the increment first, apply load second, then apply reset.

    // Also check out: http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com/PC-Hdl-td4026543.html

    Inc16 (in=feedback, out=incrementedFeedback);
    Mux16 (a=feedback, b=incrementedFeedback, sel=inc, out=incrementOut);

    Mux16 (a=incrementOut, b=in, sel=load, out=loadOut);

    Mux16 (a=loadOut, b[0..15]=false, sel=reset, out=resetOut);

    // We should update the stored value in the register anytime we do a reset,
    // load or increment.
    Or (a=reset, b=load, out=resetOrLoad);
    Or (a=resetOrLoad, b=inc, out=resetOrLoadOrInc);

    Register (in=resetOut, load=resetOrLoadOrInc, out=feedback, out=out);
}
