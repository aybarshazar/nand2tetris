// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 *
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 (24576) is invalid. Access to any address in
 * the range 0x4000-0x5FFF (16384 - 24575) results in accessing the screen
 * memory map. Access to address 0x6000 (24576) results in accessing the
 * keyboard memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    /*

    If the most significant bit of the address is 1, and the rest is zero
    (100 0000 0000 0000), that number would yield 2^14 -> 16384 (start of
    screen memory map). So any address that has the most significant bit as
    zero will be less than 16384 and will map to RAM16K.

    If the most significant 2 bits of the address is 1, and the rest is zero
    (110 0000 0000 0000), that number would yield 2^14 + 2^13 -> 24576
    (keyboard memory address).

    000 0000 0000 0000 ->     0 -> start of RAM16K
    011 1111 1111 1111 -> 16383 -> end of RAM16K
    100 0000 0000 0000 -> 16384 -> start of Screen
    101 1111 1111 1111 -> 24575 -> end of Screen
    110 0000 0000 0000 -> 24576 -> Keyboard

    According to the graph above:
    - RAM16K cares about the least significant 14 bits of the address (address[0..13]).
    - Screen cares about the least significant 13 bits of the address (address[0..12]).
    - Most significant 2 bits (address[13..14]) determine which chip we should be operating on:
      - 0* -> RAM16K
      - 10 -> Screen
      - 11 -> Keyboard

    */

    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    DMux4Way (in=load,
              sel=address[13..14],
              a=ram16kLoad1,
              b=ram16kLoad2,
              c=screenLoad);

    Or (a=ram16kLoad1, b=ram16kLoad2, out=ram16kLoad);

    RAM16K (in=in, load=ram16kLoad, address=address[0..13], out=ram16kOut);
    Screen (in=in, load=screenLoad, address=address[0..12], out=screenOut);
    Keyboard (out=keyboardOut);

    Mux4Way16 (a=ram16kOut,
               b=ram16kOut,
               c=screenOut,
               d=keyboardOut,
               sel=address[13..14],
               out=out);
}
